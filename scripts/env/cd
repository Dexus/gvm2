# cd
#
# -*- Shell-Unix-Generic -*-
#
# Override the cd() function to implement auto-switching of go version and
# pkgset when changing into a directory.
#
. "$GVM_ROOT/scripts/functions" || return 1
. "$GVM_ROOT/scripts/function/_bash_pseudo_hash" || return 1

# user could be reloading this file, restore preserved functions if we've been
# through here already.
if [[ $(declare -F gvm-oldcd) ]]
then
    eval "$(echo "cd()"; declare -f gvm-oldcd | tail -n +2)"
    unset -f gvm-oldcd
fi

if [[ $(declare -F cd) ]]
then
    eval "$(echo "gvm-oldcd()"; declare -f cd | tail -n +2)"
elif [[ "$(builtin type cd)" == "cd is a shell builtin" ]]
then
    eval "$(echo "gvm-oldcd() { builtin cd \$*; return \$?; }")"
fi

# cd()
# /*!
# @abstract Override the cd() function to implement auto-switching of go version
#   and pkgset when changing into a directory
# @discussion
# This override seeks to preserve the functionality of any pre-existing override
#  of the cd() function.
# @param path Path of directory to change into
# @return Returns success (status 0) or failure (status 1).
# */
cd() {
    if [[ $(declare -F gvm-oldcd) ]]
    then
        gvm-oldcd $*
    fi

    local dot_go_version dot_go_pkgset rslt
    local defaults_hash=()
    local defaults_go_name defaults_go_pkgset
    local defaults_resolved=false

	if [[ "$GVM_ROOT" == "" ]]; then
		display_error "GVM_ROOT not set. Please source \$GVM_ROOT/scripts/gvm"
		return $?
	fi

    # gather default environment settings, they can change at any time!
    defaults_hash=( $(read_environment_file "${GVM_ROOT}/environments/default") )
    if [[ $? -eq 0 ]]
    then
        defaults_resolved=true
    else
        [[ $GVM_DEBUG ]] && echo "Can't find default environment. Falling back to system."
        defaults_hash=( $(read_environment_file "${GVM_ROOT}/environments/system") )
        if [[ $? -eq 0 ]]
        then
            defaults_resolved=true
        else
            [[ $GVM_DEBUG ]] && echo "Can't find system environment."
        fi
    fi

    if [[ "${defaults_resolved}" == false ]]
    then
        [[ $GVM_DEBUG ]] && echo "Resolving fallback go version and pkgset."
        local fallback_go_version="$(resolve_fallback_version)"
        local fallback_go_pkgset="$(resolve_fallback_pkgset "${fallback_go_version}")"
        defaults_hash=( $(setValueForKeyFakeAssocArray "gvm_go_name" "${fallback_go_version}" "${defaults_hash[*]}") )
        defaults_hash=( $(setValueForKeyFakeAssocArray "gvm_pkgset_name" "${fallback_go_pkgset}" "${defaults_hash[*]}") )
        unset fallback_go_version
        unset fallback_go_pkgset
        defaults_resolved=true
    fi

    defaults_go_name="$(valueForKeyFakeAssocArray "gvm_go_name" "${defaults_hash[*]}")"
    defaults_go_pkgset="$(valueForKeyFakeAssocArray "gvm_pkgset_name" "${defaults_hash[*]}")"
    if [[ $GVM_DEBUG ]]
    then
        echo "Resolved default go: ${defaults_go_name}"
        echo "Resolved default pkgset: ${defaults_go_pkgset}"
    fi

    dot_go_version="$(_find_closest_dot_go_version)"
    rslt=$?
    if [[ $rslt -eq 0 ]]
    then
        [[ $GVM_DEBUG ]] && echo "Found dot_go_version: ${dot_go_version}"
        local use_goversion="$(_read_dot_go_version "${dot_go_version}")"
        [[ $GVM_DEBUG ]] && echo "Switching to: ${use_goversion}"

        \gvm use --quiet "${use_goversion}"
        unset use_goversion
    elif [[ -n "${defaults_go_name}" ]]
    then
        [[ $GVM_DEBUG ]] && echo "No .go_version found. Using system or default go."
        \gvm use --quiet "${defaults_go_name}"
    else
        # quietly failing
        if [[ $GVM_DEBUG ]]
        then
            echo "No fallback go version could be found."
            if [[ ! -d "$GVM_ROOT/archive/go" ]]
            then
                echo "$(locale_text_for_key "go_install_prompt")"
            fi
        fi

        # not a cd() error, just a gvm error...need to pretend nothing happened!
        return 0
    fi

    dot_go_pkgset="$(_find_closest_dot_go_pkgset)"
    rslt=$?
    if [[ $rslt -eq 0 ]]
    then
        [[ $GVM_DEBUG ]] && echo "Found .go_pkgset: ${dot_go_pkgset}"
        local use_gopkgset="$(_read_dot_go_pkgset "${dot_go_pkgset}")"
        [[ $GVM_DEBUG ]] && echo "Switching to: ${use_gopkgset}"

        \gvm pkgset use --quiet "${use_gopkgset}"
        unset use_gopkgset
    elif [[ -n "${defaults_go_pkgset}" ]]
    then
        [[ $GVM_DEBUG ]] && echo "No .go_pkgset found. Using system or default pkgset."
        \gvm pkgset use --quiet "${defaults_go_pkgset}"
    else
        # quietly failing
        [[ $GVM_DEBUG ]] && echo "No fallback pkgset could be found."
    fi

    return 0
}

function _find_closest_dot_go_version() {
    local resp rslt

    resp="$(find_path_upwards ".go-version")"
    rslt=$?

    echo "${resp}"; return $rslt
}

function _find_closest_dot_go_pkgset() {
    local resp rslt

    resp="$(find_path_upwards ".go-pkgset")"
    rslt=$?

    echo "${resp}"; return $rslt
}

function _read_dot_go_version() {
    local path="${1}"
    local version=""
    local regex='^(go([0-9]+(\.[0-9]+)*))$'

    while IFS=$'\n' read -r _line; do
        # skip comment lines
        [[ "${_line}" =~ \#.* ]] && continue

        # looking for pattern "go1.2[.3]"
        if [[ "${_line}" =~ ${regex} ]]
        then
            version="${_line}"
            break
        fi
    done <<< "$(cat "${path}")"

    echo "${version}"

    if [[ -z "${version}" ]]
    then
        return 1
    fi

    return 0
}

function _read_dot_go_pkgset() {
    local path="${1}"
    local pkgset=""
    local regex='^([A-Za-z0-9._#:%\+\-]+)$'

    while IFS=$'\n' read -r _line; do
        # skip comment lines
        [[ "${_line}" =~ \#.* ]] && continue

        # fairly loose naming convention, exclude @ symbol
        if [[ "${_line}" =~ ${regex} ]]
        then
            pkgset="${_line}"
            break
        fi
    done <<< "$(cat "${path}")"

    echo "${pkgset}"

    if [[ -z "${pkgset}" ]]
    then
        return 1
    fi

    return 0
}
